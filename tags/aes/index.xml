<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aes on 临风博客</title>
    <link>https://jordonyang.github.io/tags/aes/</link>
    <description>Recent content in Aes on 临风博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <copyright>All rights reserved</copyright>
    <lastBuildDate>Sat, 12 Jan 2019 10:42:11 +0800</lastBuildDate>
    
	<atom:link href="https://jordonyang.github.io/tags/aes/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Custom Secure Class Loader</title>
      <link>https://jordonyang.github.io/post/java/vm/custom_secure_classloader/</link>
      <pubDate>Sat, 12 Jan 2019 10:42:11 +0800</pubDate>
      
      <guid>https://jordonyang.github.io/post/java/vm/custom_secure_classloader/</guid>
      <description>0x00. 简介 近年来，初创企业和企业都在使用云服务。然而，它带来了安全问题。在这一点上，开发的代码与数据是不同的。关键数据应加密存储。另一方面，开发的代码大多是脆弱地安装在服务器上。大多数Java项目都是直接在服务器上运行后缀为jar或war的扩展文件。这些文件的层次结构中包含字节码文件。然而，有些反编译器可从字节码文件中提取原始Java代码，这对于专利性较强或者企业私有的代码而言是极为不利的。
对于这种情况，我们应该像加密关键数据一样加密重要的代码，将它们存储在云数据库中，并在运行时解密，以保护知识产权。这样，即使云系统被入侵，私密代码仍然是安全的，因为加密密钥不会存储在云系统中。
0x01. 编译方 假设存在非常重要的代码如下，使用IntelliJ IDEA或者javac.exe对其进行编译得到字节码文件，使用IntelliJ IDEA Decompiler或者其他反编译工具很容易就可以得到源码，下面将其放置到E:\\crypto中。
package org.jordon.vm; public class CoreClass { public static void main(String[] args) { System.out.println(&amp;quot;hello world&amp;quot;); } }  使用javax.crypto.Cipher工具包中的AES-128对编译后的CoreClass类的字节码文件进行加密，此处使用固定密钥进行测试，实际工程中应使用随机密钥。加密后的字节码文件放置到E:\crypto\org\jordon\vm中.
public class ClassEncryption { public static void main(String[] args) throws Exception{ String path = &amp;quot;E:\\crypto&amp;quot;; String classname = &amp;quot;CoreClass&amp;quot;; String algorithm = &amp;quot;AES&amp;quot;; // 16 x 8 = 128 位密钥 byte[] key = {75, 110, -45, -61, 101, -103, -26, -25, 55, -70, 19, 51, 66, -91, -35, 19}; System.</description>
    </item>
    
    <item>
      <title>Theory-based Implementation of AES Algorithm</title>
      <link>https://jordonyang.github.io/post/security/crypto/symmetry/aes/</link>
      <pubDate>Thu, 18 Oct 2018 22:23:44 +0800</pubDate>
      
      <guid>https://jordonyang.github.io/post/security/crypto/symmetry/aes/</guid>
      <description>0x00. TOC  0x01.概述 0x02.AES算法的数学基础  1.有限域 2. AES在有限域上的表示 2. AES的字表示与运算 2.1. 字表示 2.2. 字运算  0x03.AES的加密过程  1.状态 2.加密过程概述 3.AES有限域上加加法 4.轮密钥的生成  4.1.密钥扩展 4.2.轮密钥的选择 4.3.代码实现  5.AES基本变换  5.1.S盒变换 5.2.行移位变换 5.3.列混合变换  6.对外加密接口 7.核心加密逻辑   0x04.解密过程  1.AES基本逆变换 2.对外解密接口 3.核心解密逻辑  0x05.测试 0x06.说明 0x07.参考  0x01. 概述 美国政府在1997年9月12日公开征集更高效更安全的替代DES加密算法，第一轮共有15种算法入选，其中5种算法入围了决赛，分别是MARS，RC6，Rijndael，Serpent和Twofish。又经过3年的验证、评测及公众讨论之后Rijndael算法最终入选。
Rijndael算法之所以最终能够被选为AES的原因是其安全、性能好、效率高、实用灵活。
Rijndael算法支持多种分组及密钥长度，介于128-256之间所有32的倍数均可，最小支持128位，最大256位，而AES标准支持的分组大小固定为128位，密钥长度有3种选择：128位、192位及256位。TOC
0x02. AES算法的数学基础 Rijndaels算法中的许多运算是按字节和4字节的字来定义的。把一个字节看成是在有限域GF(2^8)上的一个元素。有限域（Finite Field）又名伽罗瓦域（Galois field），简单言之就是一个满足特定规则的集合，集合中的元素可以进行加减乘除运算，且运算结果也是属于此集合。 TOC
1. 有限域 AES的基础域是有限域 GF(28) TOC
 一个字节的全体256种取值构成一个GF(28) 一个GF(2)上的8次既约多项式可生成一个 GF(28)
 GF(28)的全体元素构成加法交换群、线性空间。 GF(28)的非零元素构成乘法循环群。  2.</description>
    </item>
    
  </channel>
</rss>