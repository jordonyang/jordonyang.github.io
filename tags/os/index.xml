<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Os on 临风博客</title>
    <link>https://jordonyang.github.io/tags/os/</link>
    <description>Recent content in Os on 临风博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh_CN</language>
    <copyright>All rights reserved</copyright>
    <lastBuildDate>Sun, 23 Dec 2018 21:05:05 +0800</lastBuildDate>
    
	<atom:link href="https://jordonyang.github.io/tags/os/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Notes for OS Exam</title>
      <link>https://jordonyang.github.io/post/os/sc/</link>
      <pubDate>Sun, 23 Dec 2018 21:05:05 +0800</pubDate>
      
      <guid>https://jordonyang.github.io/post/os/sc/</guid>
      <description>前言： 本来不打算发的，想想(再)还是(水)留(一)个记(篇)录吧。想到最后一道简单到爆却没时间做的移臂调度不禁心塞😭
0x00. 知识点 第一章. 引论  计算机操作系统的功能是控制、管理计算机系统的资源和程序的执行。 分时系统的特点  多路性：各用户可同时请求系统服务，分时原则 独立性：各用户的请求彼此独立，互不干扰 及时性：响应快 交互性：用户通过终端进行广泛的人机对话  多个用户是经过网络连接，同时使用计算机系统不是分时系统的特点。每个用户都在不同的时间片运行，只是时间片很小难以察觉。 在实时操作系统的控制下，计算机系统能及时处理由过程控制反馈的数据，并作出响应。 操作系统为用户程序完成与硬件相关和应用无关的工作。 分时操作系统的主要目的是计算机系统的交互性。 操作系统不进行软件管理。 从用户的观点看，操作系统是用户与计算机之间的接口 在操作系统的各功能组成部分中，进程调度不需要硬件的支持。 屏蔽所有中断命令应该只在核心态下执行。 多道批处理系统的主要缺点是缺少交互性。 配置了操作系统的计算机被称为虚拟计算机。 UNIX操作系统是一种多用户的、人机交互的分时系统。 实时操作系统必须在被控对象规定的时间内响应一个新任务。 操作系统提供给用户程序的接口是系统调用。 操作系统的最主要设计目标是方便性和有效性。  第二章 进程描述与控制  进程之间的制约关系可以归结为同步与互斥。 在进程状态变化中，等待→运行的变化是不可能发生的。 进程和程序的本质区别是动态和静态特征。 某进程所要求的一次打印输出结束，该进程被唤醒，其进程状态将从等待状态改到就绪状态。 临界区是指一段程序，用于控制进程/线程对临界资源的互斥访问。 进程是PCB结构、程序和数据的集合。 多道程序系统中的操作系统分配资源以进程为基本单位。 通常，用户进程被建立后，随着程序运行正常或异常结束而撤消。 同步机制应遵循的规则  空闲让进：当无进程进入临界区，应允许一个进程访问临界资源 忙则等待：当已有进程进入临界区访问临界资源，其他进程必须等待，以保证互斥访问 有限等待：保证进程在有限时间内进入临界区 让权等待：进程不能进入临界区时，应立即放弃CPU执行权  信号量同步机制：通过两个原子操作wait(s)和signal(s)来访问，这两个操作又分别被称为P、V操作  整型信号量：设置整型量，没有遵循让权等待原则，请求临界资源的进程出于“忙等”状态 记录型信号量：设置等待队列，实现让权等待。 AND型信号量：要么全分配，要么一个也不分配。避免系统死锁（静态资源分配法）。 信号量集：为提高效率而对AND信号的扩充。允许一次申请多种资源多个。  三大进程同步问题  生产者-消费者问题 哲学家进餐问题 读者-写者问题  当一个进程获得了所等待的资源（IO完成等），就要退出等待队列而进入就绪队列。 多道程序设计能充分发挥CPU与外设之间的并行工作能力。 在引入线程的操作系统中，把线程作为调度和分派的基本单位，而把进程作为资源拥有的基本单位。 S为死锁状态的充要条件是当且仅当S状态的资源分配图是不可完全简化的，该充要条件称为死锁定理。  第四章 进程的调度与死锁  在批处理系统中，周转时间是指作业等待时间和运行时间之和。 先来先服务调度：排队等待时间最长的作业被优先调度。 操作系统用于  作业调度的算法有：先来先服务、优先级调度、高响应比优先 用于进程调度的算法：时间片轮转、优先数优先、多级反馈队列  两个进程争夺同一个资源不一定死锁。 资源要求多的作业，其优先权应低于资源要求少的作业；系统进程的优先权应高于用户进程的优先权；计算型作业的优先权，应低于I/O型作业的优先权；在动态优先权时，随着进程运行时间的增加，其优先权降低。 产生死锁的原因：  资源分配策略不当 并发进程执行速度不当  多个进程由于竞争互斥使用的资源又互不相让而进入死锁。 资源分配图中有环路则系统可能存在死锁，也可能不存在死锁。 一般来说，对需经常启动外设的进程给一个较小的时间片比较合适（阻塞，不需CPU）。 最高响应比优先既有利于短小作业又兼顾到长作业的作业调度。 在单处理器的多进程系统中，进程什么时候占用处理器和能占用多长时间，取决于进程自身和进程调度策略。 设系统中有n个并发进程，竞争资源R，且每个进程都需要m个R类资源，为使该系统不会因竞争该类资源而死锁，资源R至少要有 (n-1) x m + 1个。 分时系统中进程调度算法通常采用时间片轮转法。 某单处理器多进程系统中有多个就绪进程，在进程处于临界区时仍能进行处理机调度。  第四章 存储器管理  存储管理方式：  连续分配存储 固定分区分配 可变式分区分配  首次适应：符合大小要求即分配 循环首次适应：从上次分区的下一分区起循环找，找到符合大小要求即分配 最佳适应：在空闲区表中以空闲区长度按从小到大排列 最坏适应：在空闲区表中以空闲区长度按从大到小排列  动态可重定位分区分配：相比于可变式分区分配多了紧凑。</description>
    </item>
    
  </channel>
</rss>